@page "/js"
@inject IJSRuntime JSRuntime;

<h1>Using JavaScript</h1>

<p>Here we are able to call native JavaScript methods from C#. Blazor is able to inject a JavaScript run-time from which it can call methods from loaded scripts.
</p>

<p>Using the <code>/js/math.js</code> script, compare the result of some simple calculations in JavaScript vs C# (highlighting the issue with floating-point numbers)</p>
<table class="table" id="math-compare-table">
    <caption>How does Maths Work?</caption>
    <thead>
        <tr>
            <td></td>
            <th scope="col">
                <img src="images/js.png" alt="JavaScript"/>
            </th>
            <th scope="col">
                <img src="images/csharp.png" alt="C#"/>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var m in mathResults)
        {
            <tr>
                <th scope="row">@m.Calculation</th>
                <td>@m.JsResult</td>
                <td>@m.CSharpResult</td>
            </tr>
        }
    </tbody>
</table>


@code {
    private MathResult[] mathResults = {
            new MathResult("0.1 + 0.2") { CSharpResult = 0.1 + 0.2 },
            new MathResult("0.1 + 0.7") { CSharpResult = 0.1 + 0.7 }
        };

    protected override async Task OnInitializedAsync()
    {
        for (int i = 0; i < mathResults.Length; i++)
        {
            mathResults[i].JsResult = await JSRuntime.InvokeAsync<decimal>("getCalculationResult", i);
        }
    }

    public class MathResult {
        public MathResult(string calc)
        {
            Calculation = calc;
        }
        public string Calculation { get; set; }
        public decimal JsResult { get; set; }
        public double CSharpResult { get; set; }
    }
}
